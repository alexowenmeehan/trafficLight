; WRITTEN BY            ALEXANDER OWEN-MEEHAN (ID: 1434732) AND DANIEL FOAD (ID: 1526813)
; DATE                  25/02/2016
; FILE SAVED AS         LAB3.ASM	
; DEVICE                PIC16F84
; OSCILLATOR            XT (4MHZ)
; WATCHDOG              DISABLED
; CODE PROTECT          OFF
; FUNCTION              MAKES A TRAFFIC LIGHT SEQUENCE, STAYS ON GREEN AND THEN GOES THROUGH RED AND AMBER SEQUENCE WITH BUTTON PRESS INTERRUPT
; -----------------------  I/O EQUATES    ------------------------------------------------------------------------------------------
PORTA  	 	EQU     0x05	;ASSIGN THE PORTA REGISTER TO THE LABEL 'PORTA'
PORTB  		EQU     0x06    ;ASSIGN THE PORTB REGISTER TO THE LABEL 'PORTB'
; -----------------------  REGISTER EQUATES    -------------------------------------------------------------------------------------
PC			EQU		0X02	;ASSIGN THE PROGRAM COUNTER REGISTER TO THE LABEL 'PC'
STATUS		EQU 	0X03	;ASSIGN THE STATUS REGISTER TO THE LABEL 'STATUS'
TRISB 		EQU 	0X06 	;ASSIGN THE TRIS REGISTER FOR PORT B IN THE SECOND MEMORY BANK TO THE LABEL 'TRIS B'
INTCON		EQU		0X0B	;ASSIGN THE INTERRUPT CONTROL REGISTER TO THE LABEL 'INTCON'
TEMP_W		EQU		0X0F	;ASSIGN THE REGISTER USED TO STORE WORKING REGISTER CONTENTS DURING INTERRUPT TO THE LABEL 'TEMP_W'
; -----------------------  GENERAL EQUATES    --------------------------------------------------------------------------------------
GIE			EQU		7		;ASSIGN THE GENERAL INTERRUPT ENABLE TO THE NUMBER 7
RP0			EQU 	5 		;ASSIGN THE RP0 BANK SWITCHING PIN TO THE NUMBER 5
INTE		EQU		4		;ASSIGN THE RB0 INTERRUPT ENABLE TO THE NUMBER 4
INTF		EQU		1		;ASSIGN THE RBO INTERRUPT FLAG TO THE NUMBER 1
; ----------------------- MAIN PROGRAM ---------------------------------------------------------------------------------------------
        	ORG     0x00  		;'ORG' SPECIFIES THE MEMORY LOCATION OF THE PROGRAM
        	MOVLW   0x00    	;MOVE THE VALUE 00, I.E., ALL 0'S TO W
			GOTO	START
;
			ORG		0X04		;SPECIFIES THE LOCATION OF THE INTERRPUT SCRIPT
			GOTO	INT_SER		;FUNCTION FOR WHEN PEDESTRIAN PUSHES BUTTON

INT_SER		MOVWF	TEMP_W		;MAKES A COPY AND SAVES THE CURRENT WORKING REGISTER VALUE
			BCF		PORTB, 3
			MOVLW	0X02
			CALL	LED_TABLE	;MAKE THE LIGHTS AMBER WITH A RED PEDESTRIAN LIGHT
			CALL 	DELAY		;PAUSES FOR ANOTHER TWO SECONDS BEFORE CHANGING LIGHTS TO GREEN
			BCF 	PORTB,4		
			BCF		PORTB,2		;TURNS OFF THE AMBER TRAFFIC LIGHT AND RED PEDESTRIAN LIGHT
			BSF		PORTB,5 
			MOVLW	0X00		;VALUE TO FIND THE DEFAULT CONDITION FOR THE TRAFFIC LIGHT IN THE LOOKUP TABLE
			CALL 	LED_TABLE	;TURNS ON THE GREEN PEDESTRIAN LIGHT AND RED TRAFFIC LIGHT
			CALL 	DELAY_2		;PAUSES FOR A FURTHER 10 SECONDS FOR PEDESTRIANS TO CROSS
			BCF		PORTB,5
			BSF		PORTB, 4
			CALL	FLASH		;FLASHES THE AMBER LIGHT FOR A SHORT TIME
			BCF		PORTB,1
			BCF		PORTB, 2
			MOVLW	0X04		;VALUE TO FIND THE DEFAULT CONDITION FOR THE TRAFFIC LIGHT IN THE LOOKUP TABLE
			CALL 	LED_TABLE	;FIND THE APPROPRIATE VALUE ON THE LOOKUP TABLE FOR THE GREEN LIGHT WITH RED PEDESTRIAN
			MOVF	TEMP_W, W	;RETURN THE PREVIOUS WORKING VALUE BEFORE THE INTERRUPT TO THE WORKING REGISTER
			BCF		INTCON,INTF ;RE-ENABLE THE INTERRUPTS BY CLEARING THE RB0 INTERRUPT FLAG
			RETFIE				;RETURN TO THE MAIN LOOP

START		BSF 	STATUS, RP0	;SWITCH CURRENT BANK TO BANK 1
			MOVLW	OXO1		;MOVE VALUE (0000 0001) INTO THE WORKING REGISTER
			MOVWF	TRISB		;PUSH 0X01 TO TRIS B REGISTER MAKES ALL PORTB LINES OUTPUTS, ASIDE FROM RB0, WHICH BECOMES INPUT.
			BCF		STATUS, RP0	;SWITCHES CURRENT BANK TO BANK 0
			BSF		INTCON,GIE	;ENABLES GENERAL INTERRUPTS
			BSF		INTCON,INTE ;ENABLES INTERRUPTS ON PIN RB0
;
LOOP 	    BSF		PORTB,4
			MOVLW	0X04		;VALUE TO FIND THE DEFAULT CONDITION FOR THE TRAFFIC LIGHT IN THE LOOKUP TABLE
			CALL 	LED_TABLE	;FIND THE APPROPRIATE VALUE ON THE LOOKUP TABLE FOR THE GREEN LIGHT WITH RED PEDESTRIAN
			GOTO    LOOP		;RETURN TO THE BEGINNING OF THE LOOP
;
LED_TABLE   ADDWF	PC,F		;ADD OFFSET TO PROGRAM COUNTER	
			BSF		PORTB,1		;VALUE FOR RED WITH RED PEDESTRIAN LIGHT 
			RETURN
			BSF		PORTB,2		;VALUE FOR AMBER WITH RED PEDESTRIAN LIGHT
			RETURN
			BSF		PORTB,3		;VALUE FOR GREEN WITH RED PEDESTRIAN LIGHT (DEFAULT CONDITION)
			RETURN		
;
DELAY		MOVLW	0x0C		;MOVE THE VALUE '12' TO THE WORKING REGISTER
			MOVWF	0x0E		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0E
GET_N2		MOVLW	0XFF		;MOVE THE VALUE '255' TO THE WORKING REGISTER
			MOVWF	0X0C		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0C
GET_N		MOVLW	0xFF		;MOVE THE VALUE '255' TO THE WORKING REGISTER
			MOVWF	0x0D		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0C1
DEC_N		DECFSZ	0x0D, F		;DECREASE VALUE IN 0X0D, SKIP NEXT INSTRUCTION IF FILE CONTENTS ARE ZERO
			GOTO	DEC_N		;RETURN TO DECREASE N LABEL IF 0X0D IS NOT ZERO
			DECFSZ	0x0C, F		;DECREASE VALUE IN 0X0C, SKIP NEXT INSTRUCTION IF FILE CONTENTS ARE ZERO
			GOTO	GET_N		;RETURN TO DECREASE N LABEL IF 0X0D IS NOT ZERO
			DECFSZ	0X0E		
			GOTO	GET_N2
			RETURN				;RETURN TO MAIN FUNCTION

DELAY_2		MOVLW	0x1F		;MOVE THE VALUE '12' TO THE WORKING REGISTER
			MOVWF	0x0E		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0E
GET_N4		MOVLW	0XFF		;MOVE THE VALUE '255' TO THE WORKING REGISTER
			MOVWF	0X0C		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0C
GET_N3		MOVLW	0xFF		;MOVE THE VALUE '255' TO THE WORKING REGISTER
			MOVWF	0x0D		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0C1
DEC_N3		DECFSZ	0x0D, F		;DECREASE VALUE IN 0X0D, SKIP NEXT INSTRUCTION IF FILE CONTENTS ARE ZERO
			GOTO	DEC_N3		;RETURN TO DECREASE N LABEL IF 0X0D IS NOT ZERO
			DECFSZ	0x0C, F		;DECREASE VALUE IN 0X0C, SKIP NEXT INSTRUCTION IF FILE CONTENTS ARE ZERO
			GOTO	GET_N3		;RETURN TO DECREASE N LABEL IF 0X0D IS NOT ZERO
			DECFSZ	0X0E		
			GOTO	GET_N4
			RETURN				;RETURN TO MAIN FUNCTION
;
FLASH		MOVLW	0x06		;MOVE THE VALUE '6' TO THE WORKING REGISTER
			MOVWF	0x0E		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0E
GET_NUM2	MOVLW	0XAF		;MOVE THE VALUE '175' TO THE WORKING REGISTER
			MOVWF	0X0C		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0C 
			MOVLW	0X04
			XORWF	PORTB,F 
GET_NUM		MOVLW	0xFF		;MOVE THE VALUE '255' TO THE WORKING REGISTER
			MOVWF	0x0D		;MOVE THE WORKING REGISTER CONTENTS TO FILE REGISTER 0X0C1
DEC_NUM		DECFSZ	0x0D, F		;DECREASE VALUE IN 0X0D, SKIP NEXT INSTRUCTION IF FILE CONTENTS ARE ZERO
			GOTO	DEC_NUM		;RETURN TO DECREASE N LABEL IF 0X0D IS NOT ZERO
			DECFSZ	0x0C, F		;DECREASE VALUE IN 0X0C, SKIP NEXT INSTRUCTION IF FILE CONTENTS ARE ZERO
			GOTO	GET_NUM		;RETURN TO DECREASE N LABEL IF 0X0D IS NOT ZERO
			DECFSZ	0X0E		
			GOTO	GET_NUM2
			RETURN				;RETURN TO MAIN FUNCTION
;
        	END